"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const DataUrl = {
    "臺北市": "https://tcgbusfs.blob.core.windows.net/blobyoubike/YouBikeTP.json",
    "桃園市": "https://data.tycg.gov.tw/api/v1/rest/datastore/a1b4714b-3b75-4ff8-a8f2-cc377e4eaa0f?format=json",
    "臺中市": "	https://datacenter.taichung.gov.tw/swagger/OpenData/9af00e84-473a-4f3d-99be-b875d8e86256",
    "高雄市": "https://api.kcg.gov.tw/api/service/Get/b4dd9c40-9027-4125-8666-06bef1756092"
};
function default_1(region, station) {
    return axios_1.default.get(DataUrl[region])
        .then(res => {
        switch (region) {
            case "臺北市":
                if (station?.length) {
                    return Object.entries(res.data.retVal).filter((data) => {
                        if (data[1].sna.includes(station)) {
                            return true;
                        }
                        return false;
                    }).map((data) => data[1]);
                }
                else {
                    return Object.entries(res.data.retVal).map((data) => data[1]);
                }
            case "臺中市":
            case "桃園市":
            case "高雄市":
                if (station?.length) {
                    const data = region === "桃園市" ? res.data.result.records : (region === "高雄市" ? res.data.data.retVal : res.data.retVal);
                    return data.filter(d => d.sna.includes(station));
                }
                else {
                    return region === "桃園市" ? res.data.result.records : res.data.data.retVal;
                }
        }
    });
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9UeXBlU2NyaXB0L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsa0RBQTBCO0FBRTFCLE1BQU0sT0FBTyxHQUFHO0lBQ1osS0FBSyxFQUFFLG1FQUFtRTtJQUMxRSxLQUFLLEVBQUUsaUdBQWlHO0lBQ3hHLEtBQUssRUFBRSwyRkFBMkY7SUFDbEcsS0FBSyxFQUFFLDZFQUE2RTtDQUN2RixDQUFBO0FBMkNELG1CQUFtRCxNQUFTLEVBQUUsT0FBZ0I7SUFDMUUsT0FBTyxlQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUM1QixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDUixRQUFRLE1BQU0sRUFBRTtZQUNaLEtBQUssS0FBSztnQkFDTixJQUFJLE9BQU8sRUFBRSxNQUFNLEVBQUU7b0JBQ2pCLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQTJCLEVBQUUsRUFBRTt3QkFDMUUsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRTs0QkFDL0IsT0FBTyxJQUFJLENBQUE7eUJBQ2Q7d0JBQ0QsT0FBTyxLQUFLLENBQUE7b0JBQ2hCLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQTJCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO2lCQUVuRDtxQkFDSTtvQkFDRCxPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUEyQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtpQkFDdkY7WUFDTCxLQUFLLEtBQUssQ0FBQztZQUNYLEtBQUssS0FBSyxDQUFDO1lBQ1gsS0FBSyxLQUFLO2dCQUNOLElBQUksT0FBTyxFQUFFLE1BQU0sRUFBRTtvQkFDakIsTUFBTSxJQUFJLEdBQW9CLE1BQU0sS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7b0JBQ3RJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7aUJBQ25EO3FCQUNJO29CQUNELE9BQU8sTUFBTSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUE7aUJBQzNFO1NBQ1I7SUFDTCxDQUFDLENBQUMsQ0FBQTtBQUNWLENBQUM7QUE3QkQsNEJBNkJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xyXG5cclxuY29uc3QgRGF0YVVybCA9IHtcclxuICAgIFwi6Ie65YyX5biCXCI6IFwiaHR0cHM6Ly90Y2didXNmcy5ibG9iLmNvcmUud2luZG93cy5uZXQvYmxvYnlvdWJpa2UvWW91QmlrZVRQLmpzb25cIixcclxuICAgIFwi5qGD5ZyS5biCXCI6IFwiaHR0cHM6Ly9kYXRhLnR5Y2cuZ292LnR3L2FwaS92MS9yZXN0L2RhdGFzdG9yZS9hMWI0NzE0Yi0zYjc1LTRmZjgtYThmMi1jYzM3N2U0ZWFhMGY/Zm9ybWF0PWpzb25cIixcclxuICAgIFwi6Ie65Lit5biCXCI6IFwiXHRodHRwczovL2RhdGFjZW50ZXIudGFpY2h1bmcuZ292LnR3L3N3YWdnZXIvT3BlbkRhdGEvOWFmMDBlODQtNDczYS00ZjNkLTk5YmUtYjg3NWQ4ZTg2MjU2XCIsXHJcbiAgICBcIumrmOmbhOW4glwiOiBcImh0dHBzOi8vYXBpLmtjZy5nb3YudHcvYXBpL3NlcnZpY2UvR2V0L2I0ZGQ5YzQwLTkwMjctNDEyNS04NjY2LTA2YmVmMTc1NjA5MlwiXHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBEYXRhQmFzZTxLPntcclxuICAgIHNubzogc3RyaW5nLFxyXG4gICAgc25hOiBzdHJpbmcsXHJcbiAgICB0b3Q6IHN0cmluZyxcclxuICAgIHNiaTogc3RyaW5nLFxyXG4gICAgc2FyZWE6IHN0cmluZyxcclxuICAgIG1kYXk6IHN0cmluZyxcclxuICAgIGxhdDogc3RyaW5nLFxyXG4gICAgbG5nOiBzdHJpbmcsXHJcbiAgICBhcjogc3RyaW5nLFxyXG4gICAgc2FyZWFlbjogc3RyaW5nLFxyXG4gICAgc25hZW46IHN0cmluZyxcclxuICAgIGFyZW46IHN0cmluZyxcclxuICAgIGJlbXA6IHN0cmluZyxcclxuICAgIGFjdDogS1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRhaXBlaURhdGEgZXh0ZW5kcyBEYXRhQmFzZTxzdHJpbmc+e1xyXG4gICAgXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGFvWXVhbkRhdGEgZXh0ZW5kcyBEYXRhQmFzZTxzdHJpbmc+e1xyXG4gICAgX2lkOiBudW1iZXJcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUYWlDaHVuZ0RhdGEgZXh0ZW5kcyBEYXRhQmFzZTxudW1iZXI+e1xyXG4gICAgc2NpdHk6IHN0cmluZyxcclxuICAgIHNjaXR5ZW46IHN0cmluZ1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEthb0hzaXVuZ0RhdGEgZXh0ZW5kcyBEYXRhQmFzZTxudW1iZXI+e1xyXG4gICAgc2NpdHk6IHN0cmluZ1xyXG4gICAgc2NpdHllbjogc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVHlwZURpY3Qge1xyXG4gICAgXCLoh7rljJfluIJcIjogVGFpcGVpRGF0YSxcclxuICAgIFwi5qGD5ZyS5biCXCI6IFRhb1l1YW5EYXRhLFxyXG4gICAgXCLoh7rkuK3luIJcIjogVGFpQ2h1bmdEYXRhLFxyXG4gICAgXCLpq5jpm4TluIJcIjogS2FvSHNpdW5nRGF0YVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiA8SyBleHRlbmRzIGtleW9mIFR5cGVEaWN0PihyZWdpb246IEssIHN0YXRpb24/OiBzdHJpbmcpOiBQcm9taXNlPChUeXBlRGljdFtLXSlbXT4ge1xyXG4gICAgcmV0dXJuIGF4aW9zLmdldChEYXRhVXJsW3JlZ2lvbl0pXHJcbiAgICAgICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICAgICAgc3dpdGNoIChyZWdpb24pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCLoh7rljJfluIJcIjpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGlvbj8ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuZW50cmllcyhyZXMuZGF0YS5yZXRWYWwpLmZpbHRlcigoZGF0YTogW3N0cmluZywgVHlwZURpY3RbS11dKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVsxXS5zbmEuaW5jbHVkZXMoc3RhdGlvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLm1hcCgoZGF0YTogW3N0cmluZywgVHlwZURpY3RbS11dKSA9PiBkYXRhWzFdKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuZW50cmllcyhyZXMuZGF0YS5yZXRWYWwpLm1hcCgoZGF0YTogW3N0cmluZywgVHlwZURpY3RbS11dKSA9PiBkYXRhWzFdKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgXCLoh7rkuK3luIJcIjpcclxuICAgICAgICAgICAgICAgIGNhc2UgXCLmoYPlnJLluIJcIjpcclxuICAgICAgICAgICAgICAgIGNhc2UgXCLpq5jpm4TluIJcIjpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGlvbj8ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGE6IChUeXBlRGljdFtLXSlbXSA9IHJlZ2lvbiA9PT0gXCLmoYPlnJLluIJcIiA/IHJlcy5kYXRhLnJlc3VsdC5yZWNvcmRzIDogKHJlZ2lvbiA9PT0gXCLpq5jpm4TluIJcIiA/IHJlcy5kYXRhLmRhdGEucmV0VmFsIDogcmVzLmRhdGEucmV0VmFsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5maWx0ZXIoZCA9PiBkLnNuYS5pbmNsdWRlcyhzdGF0aW9uKSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWdpb24gPT09IFwi5qGD5ZyS5biCXCIgPyByZXMuZGF0YS5yZXN1bHQucmVjb3JkcyA6IHJlcy5kYXRhLmRhdGEucmV0VmFsXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxufVxyXG5cclxuIl19